// KanbanBoardAPI.cs

using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

// -------------------
// Entity Definitions
// -------------------

public class Board {
    public int Id { get; set; }
    public string Name { get; set; }
    public List<Column> Columns { get; set; }
}

public class Column {
    public int Id { get; set; }
    public string Name { get; set; }
    public int BoardId { get; set; }
    public List<KanbanTask> Tasks { get; set; }
}

public class KanbanTask {
    public int Id { get; set; }
    public string Title { get; set; }
    public int ColumnId { get; set; }
    public int OrderIndex { get; set; }
}

// -------------------
// DTO Definitions
// -------------------

public class BoardDto {
    public int Id { get; set; }
    public string Name { get; set; }
    public List<ColumnDto> Columns { get; set; }
}

public class ColumnDto {
    public int Id { get; set; }
    public string Name { get; set; }
    public List<TaskDto> Tasks { get; set; }
}

public class TaskDto {
    public int Id { get; set; }
    public string Title { get; set; }
    public int OrderIndex { get; set; }
}

public class MoveTaskRequest {
    public int TargetColumnId { get; set; }
    public int NewPosition { get; set; }
}

public class ReorderTaskRequest {
    public int NewPosition { get; set; }
}

// -------------------
// DbContext (EF Core)
// -------------------

public class KanbanDbContext : DbContext {
    public DbSet<Board> Boards { get; set; }
    public DbSet<Column> Columns { get; set; }
    public DbSet<KanbanTask> KanbanTasks { get; set; }

    public KanbanDbContext(DbContextOptions<KanbanDbContext> options) : base(options) {}
}

// -------------------
// Controller Layer
// -------------------

[ApiController]
[Route("api/[controller]")]
public class BoardsController : ControllerBase {
    private readonly KanbanDbContext _context;

    public BoardsController(KanbanDbContext context) {
        _context = context;
    }

    // Move task to another column
    [HttpPut("tasks/{taskId}/move")]
    public async Task<IActionResult> MoveTask(int taskId, [FromBody] MoveTaskRequest request) {
        var task = await _context.KanbanTasks.FindAsync(taskId);
        if (task == null) return NotFound("Task not found");

        var targetColumnTasks = await _context.KanbanTasks
            .Where(t => t.ColumnId == request.TargetColumnId)
            .OrderBy(t => t.OrderIndex)
            .ToListAsync();

        task.ColumnId = request.TargetColumnId;
        targetColumnTasks.Insert(request.NewPosition, task);

        for (int i = 0; i < targetColumnTasks.Count; i++) {
            targetColumnTasks[i].OrderIndex = i;
        }

        await _context.SaveChangesAsync();
        return Ok("Task moved");
    }

    // Reorder task within column
    [HttpPut("tasks/{taskId}/reorder")]
    public async Task<IActionResult> ReorderTask(int taskId, [FromBody] ReorderTaskRequest request) {
        var task = await _context.KanbanTasks.FindAsync(taskId);
        if (task == null) return NotFound("Task not found");

        var tasksInColumn = await _context.KanbanTasks
            .Where(t => t.ColumnId == task.ColumnId)
            .OrderBy(t => t.OrderIndex)
            .ToListAsync();

        tasksInColumn.Remove(task);
        tasksInColumn.Insert(request.NewPosition, task);

        for (int i = 0; i < tasksInColumn.Count; i++) {
            tasksInColumn[i].OrderIndex = i;
        }

        await _context.SaveChangesAsync();
        return Ok("Task reordered");
    }

    // Get full board view
    [HttpGet("{boardId}/full")]
    public async Task<IActionResult> GetFullBoard(int boardId) {
        var board = await _context.Boards
            .Include(b => b.Columns)
                .ThenInclude(c => c.Tasks)
            .FirstOrDefaultAsync(b => b.Id == boardId);

        if (board == null) return NotFound("Board not found");

        foreach (var column in board.Columns) {
            column.Tasks = column.Tasks.OrderBy(t => t.OrderIndex).ToList();
        }

        var result = new BoardDto {
            Id = board.Id,
            Name = board.Name,
            Columns = board.Columns.Select(c => new ColumnDto {
                Id = c.Id,
                Name = c.Name,
                Tasks = c.Tasks.Select(t => new TaskDto {
                    Id = t.Id,
                    Title = t.Title,
                    OrderIndex = t.OrderIndex
                }).ToList()
            }).ToList()
        };

        return Ok(result);
    }
}
